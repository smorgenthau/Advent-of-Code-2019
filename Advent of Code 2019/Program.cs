using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Advent_of_Code_2019
{
    class Program
    {
        static void Main(string[] args)
        {
            var d1P1 = Day1Puzzle1();
            var d1P2 = Day1Puzzle2();
            Console.WriteLine($"Day 1 - Puzzle 1: {d1P1} Puzzle 2: {d1P2}");

            var d2P1 = Day2Puzzle1();
            var d2P2 = Day2Puzzle2();
            Console.WriteLine($"Day 2 - Puzzle 1: {d2P1} Puzzle 2: {d2P2}");

            var d3P1 = Day3Puzzle1();
            var d3P2 = Day3Puzzle2();
            Console.WriteLine($"Day 3 - Puzzle 1: {d3P1} Puzzle 2: {d3P2}");

            var d4P1 = Day4Puzzle1();
            var d4P2 = Day4Puzzle2();
            Console.WriteLine($"Day 4 - Puzzle 1: {d4P1} Puzzle 2: {d4P2}");

            var d5P1 = Day5Puzzle1();
            var d5P2 = Day5Puzzle2();
            Console.WriteLine($"Day 5 - Puzzle 1: {d5P1} Puzzle 2: {d5P2}");


            var d6P1 = Day6Puzzle1();
            var d6P2 = Day6Puzzle2();
            Console.WriteLine($"Day 6 - Puzzle 1: {d6P1} Puzzle 2: {d6P2}");

            var d7P1 = Day7Puzzle1();
            //var d7P2 = Day7Puzzle2();
            Console.WriteLine($"Day 7 - Puzzle 1: {d7P1}");// Puzzle 2: {d7P2}");

            var d8P1 = Day8Puzzle1();
            Console.WriteLine($"Day 8 - Puzzle 1: {d8P1}");
            Console.WriteLine("Puzzle 2:");
            Day8Puzzle2();

            //var d9P1 = Day9Puzzle1();
            //var d9P2 = Day9Puzzle2();
            //Console.WriteLine($"Day 9 - Puzzle 1: {d9P1} Puzzle 2: {d9P2}");

            var d10P1 = Day10Puzzle1();
            var d10P2 = Day10Puzzle2();
            Console.WriteLine($"Day 10 - Puzzle 1: {d10P1} Puzzle 2: {d10P2}");

            //var d11P1 = Day11Puzzle1();
            //var d11P2 = Day11Puzzle2();
            //Console.WriteLine($"Day 11 - Puzzle 1: {d11P1} Puzzle 2: {d11P2}");

            var d12P1 = Day12Puzzle1();
            var d12P2 = Day12Puzzle2();
            Console.WriteLine($"Day 12 - Puzzle 1: {d12P1} Puzzle 2: {d12P2}");

            //var d10P1 = Day10Puzzle1();
            //var d10P2 = Day10Puzzle2();
            //Console.WriteLine($"Day 10 - Puzzle 1: {d10P1} Puzzle 2: {d10P2}");

            Console.Write("Finished Puzzles, Press Enter to exit");
            Console.Read();
        }

        static int Day1Puzzle1()
        {
            var fuelList = new List<int> { 76542, 97993, 79222, 55538,
                126710,77603,67546,129345,
                60846,52191,126281,85662,
                79245,78514,91236,126982,
                94593,63104,96955,122919,
                92047,63529,75949,65479,
                116132,55851,100051,120419,
                79243,109752,57719,131000,
                99825,92855,111945,58349,
                104867,53638,110072,111190,
                126422,72304,62865,113793,
                98395,86596,89219,135417,
                113665,87273,144161,97285,
                136308,79486,140622,138221,
                115714,142175,114524,50519,
                112963,109686,113104,50622,
                102019,96717,148433,70861,
                133918,89471,112281,109168,
                68965,109233,101051,52587,
                65339,97698,126416,61012,
                120883,81018,60398,112250,
                64253,98120,74640,134790,
                80984,61221,119815,96125,
                96105,87124,60042,141705,
                57290,57881,131585,51360};

            int returner = 0;
            foreach (var item in fuelList)
            {
                var toAdd = (item / 3) - 2;
                returner += toAdd;
            }
            return returner;

        }
        static int Day1Puzzle2()
        {
            var fuelList = new List<int> { 76542, 97993, 79222, 55538,
                126710,77603,67546,129345,
                60846,52191,126281,85662,
                79245,78514,91236,126982,
                94593,63104,96955,122919,
                92047,63529,75949,65479,
                116132,55851,100051,120419,
                79243,109752,57719,131000,
                99825,92855,111945,58349,
                104867,53638,110072,111190,
                126422,72304,62865,113793,
                98395,86596,89219,135417,
                113665,87273,144161,97285,
                136308,79486,140622,138221,
                115714,142175,114524,50519,
                112963,109686,113104,50622,
                102019,96717,148433,70861,
                133918,89471,112281,109168,
                68965,109233,101051,52587,
                65339,97698,126416,61012,
                120883,81018,60398,112250,
                64253,98120,74640,134790,
                80984,61221,119815,96125,
                96105,87124,60042,141705,
                57290,57881,131585,51360};

            int returner = 0;
            foreach (var item in fuelList)
            {
                var initial = (item / 3) - 2;
                var toAdd = 0;
                while (initial > 0)
                {
                    toAdd += initial;
                    initial = initial / 3 - 2;
                }
                returner += toAdd;
            }
            return returner;

        }

        static int Day2Puzzle1()
        {
            var seed = new List<int> { 1, 0, 0, 3,
                1, 1, 2, 3,
                1, 3, 4, 3,
                1, 5, 0, 3,
                2, 1, 9, 19,
                1, 13, 19, 23,
                2, 23, 9, 27,
                1, 6, 27, 31,
                2, 10, 31, 35,
                1, 6, 35, 39,
                2, 9, 39, 43,
                1, 5, 43, 47,
                2, 47, 13, 51,
                2, 51, 10, 55,
                1, 55, 5, 59,
                1, 59, 9, 63,
                1, 63, 9, 67,
                2, 6, 67, 71,
                1, 5, 71, 75,
                1, 75, 6, 79,
                1, 6, 79, 83,
                1, 83, 9, 87,
                2, 87, 10, 91,
                2, 91, 10, 95,
                1, 95, 5, 99,
                1, 99, 13, 103,
                2, 103, 9, 107,
                1, 6, 107, 111,
                1, 111, 5, 115,
                1, 115, 2, 119,
                1, 5, 119, 0,
                99, 2, 0, 14,
                0 };

            seed[1] = 12;
            seed[2] = 2;



            return Complier(seed);

        }
        static int Day2Puzzle2()
        {
            var seed = new List<int> { 1, 0, 0, 3,
                1, 1, 2, 3,
                1, 3, 4, 3,
                1, 5, 0, 3,
                2, 1, 9, 19,
                1, 13, 19, 23,
                2, 23, 9, 27,
                1, 6, 27, 31,
                2, 10, 31, 35,
                1, 6, 35, 39,
                2, 9, 39, 43,
                1, 5, 43, 47,
                2, 47, 13, 51,
                2, 51, 10, 55,
                1, 55, 5, 59,
                1, 59, 9, 63,
                1, 63, 9, 67,
                2, 6, 67, 71,
                1, 5, 71, 75,
                1, 75, 6, 79,
                1, 6, 79, 83,
                1, 83, 9, 87,
                2, 87, 10, 91,
                2, 91, 10, 95,
                1, 95, 5, 99,
                1, 99, 13, 103,
                2, 103, 9, 107,
                1, 6, 107, 111,
                1, 111, 5, 115,
                1, 115, 2, 119,
                1, 5, 119, 0,
                99, 2, 0, 14,
                0 };

            for (int first = 0; first < 100; first++)
            {
                for (int second = 0; second < 100; second++)
                {
                    seed = new List<int> { 1, 0, 0, 3,
                1, 1, 2, 3,
                1, 3, 4, 3,
                1, 5, 0, 3,
                2, 1, 9, 19,
                1, 13, 19, 23,
                2, 23, 9, 27,
                1, 6, 27, 31,
                2, 10, 31, 35,
                1, 6, 35, 39,
                2, 9, 39, 43,
                1, 5, 43, 47,
                2, 47, 13, 51,
                2, 51, 10, 55,
                1, 55, 5, 59,
                1, 59, 9, 63,
                1, 63, 9, 67,
                2, 6, 67, 71,
                1, 5, 71, 75,
                1, 75, 6, 79,
                1, 6, 79, 83,
                1, 83, 9, 87,
                2, 87, 10, 91,
                2, 91, 10, 95,
                1, 95, 5, 99,
                1, 99, 13, 103,
                2, 103, 9, 107,
                1, 6, 107, 111,
                1, 111, 5, 115,
                1, 115, 2, 119,
                1, 5, 119, 0,
                99, 2, 0, 14,
                0 };


                    seed[1] = first;
                    seed[2] = second;
                    if (Complier(seed) == 19690720)
                        return first * 100 + second;
                }
            }

            return 0;
        }

        static int Day3Puzzle1()
        {
            var seed1 = new List<string> { "R1008", "U428", "L339", "U16", "R910", "U221", "R53", "D546", "L805", "U376", "L19", "U708", "R493", "D489", "L443", "D567", "R390", "D771", "R270", "U737", "R926", "U181", "L306", "D456", "L668", "D79", "L922", "U433", "L701", "U472", "R914", "U903", "L120", "U199", "L273", "D206", "L967", "U711", "R976", "U976", "R603", "U8", "L882", "U980", "R561", "D697", "L224", "D620", "L483", "U193", "R317", "D588", "L932", "D990", "R658", "U998", "L136", "U759", "R463", "U890", "L297", "U648", "R163", "U250", "R852", "U699", "R236", "D254", "L173", "U720", "L259", "U632", "L635", "U426", "R235", "D699", "R411", "U650", "L258", "D997", "L781", "D209", "L697", "D306", "L793", "U657", "L936", "U317", "R549", "D798", "L951", "D80", "R591", "D480", "R835", "U292", "L722", "U987", "L775", "U173", "R353", "U404", "L250", "U652", "L527", "D282", "L365", "D657", "L141", "D301", "R128", "D590", "L666", "U478", "L85", "D822", "L716", "U68", "R253", "D186", "R81", "U741", "L316", "D615", "L570", "U407", "L734", "D345", "L652", "U362", "L360", "D791", "R358", "U190", "L823", "U274", "L279", "D998", "L16", "D644", "L201", "D469", "R213", "D487", "L251", "D395", "R130", "U902", "L398", "U201", "L56", "D850", "R541", "D661", "R921", "U647", "R309", "D550", "L307", "D68", "R894", "U653", "L510", "D375", "R20", "U86", "R357", "D120", "L978", "D200", "L45", "D247", "R906", "U334", "L242", "D466", "R418", "U548", "R698", "D158", "R582", "U469", "L968", "U736", "R196", "U437", "R87", "D722", "R811", "U625", "L425", "D675", "L904", "D331", "R693", "D491", "R559", "U540", "L120", "D975", "R180", "U224", "R610", "U260", "L769", "D486", "R93", "D300", "L230", "U181", "L60", "U910", "L60", "D554", "L527", "U37", "R69", "D649", "R768", "D835", "L581", "U932", "L746", "U170", "L733", "U40", "L497", "D957", "R12", "U686", "R85", "D461", "R796", "D142", "R664", "U787", "R636", "D621", "R824", "D421", "R902", "D686", "L202", "D839", "R567", "D129", "L77", "D917", "L200", "D106", "R3", "D546", "L101", "D762", "R780", "U334", "L410", "D190", "R431", "D828", "L816", "D529", "R648", "D449", "L845", "U49", "R750", "U864", "L133", "D822", "R46", "U475", "L229", "U929", "L676", "D793", "R379", "U71", "L243", "U640", "L122", "U183", "R528", "U22", "R375", "D928", "R292", "U796", "R259", "U325", "L921", "U489", "L246", "D153", "L384", "D684", "L243", "U65", "L342", "U662", "R707" };
            var seed2 = new List<string> { "L1008", "D243", "L602", "D497", "L395", "U81", "R589", "U94", "R640", "D965", "L397", "D781", "R464", "U642", "L130", "D740", "R938", "D260", "L106", "D323", "L626", "U869", "L495", "U450", "R640", "D675", "R602", "D449", "L542", "U917", "L244", "U702", "L644", "D809", "R902", "U163", "R118", "U982", "L867", "D795", "R546", "U194", "R397", "D877", "L354", "D255", "L477", "U45", "L707", "D624", "R806", "U642", "L926", "D233", "L800", "U691", "L990", "D979", "L431", "U999", "L423", "D794", "L238", "U25", "R986", "U595", "L167", "U480", "L555", "U831", "R496", "U799", "L897", "D895", "L993", "D11", "R486", "U176", "L90", "U842", "R499", "U792", "R787", "U859", "L100", "U169", "R170", "D89", "R297", "D944", "R362", "D460", "R147", "U831", "L45", "U972", "R582", "D90", "L934", "U284", "R555", "U235", "L138", "U837", "R965", "U915", "R928", "U982", "R157", "D566", "L953", "U653", "L629", "U460", "L335", "D912", "R355", "D683", "L710", "D562", "R392", "D44", "R707", "D979", "L749", "D223", "L776", "D723", "R735", "D356", "R49", "U567", "L563", "D220", "L868", "U223", "R448", "D505", "L411", "U662", "L188", "D536", "R55", "U718", "L108", "D289", "R435", "U98", "R775", "U933", "L127", "D84", "R253", "D523", "L2", "D905", "R266", "U675", "R758", "D331", "R122", "U988", "R215", "D500", "R89", "U306", "R833", "U763", "R570", "D818", "L985", "U127", "L87", "D210", "R355", "D532", "R870", "U196", "R695", "U633", "R170", "D540", "R506", "U708", "L663", "U566", "L633", "U306", "L452", "U180", "R463", "D21", "L220", "D268", "R608", "U986", "L493", "D598", "L957", "D116", "L454", "D584", "L405", "U651", "R352", "U681", "R807", "U767", "L988", "U692", "R474", "U710", "R607", "U313", "R711", "U12", "R371", "D561", "R72", "U522", "R270", "U904", "L49", "U525", "R562", "U895", "L232", "D319", "R902", "D236", "L601", "D816", "R836", "U419", "R610", "U644", "L733", "U355", "L836", "U228", "L895", "D39", "L44", "D848", "L965", "U475", "R56", "U62", "L458", "U99", "R236", "D763", "R912", "U295", "R515", "U179", "R20", "D777", "R511", "D906", "R903", "U855", "L507", "D512", "L63", "D630", "R442", "U595", "L701", "U654", "R238", "D35", "L31", "D469", "R6", "D222", "R132", "D837", "R921", "U838", "R986", "D441", "L950", "D530", "L397", "U41", "L81", "D60", "L245", "D75", "R620", "D455", "L937", "D180", "R215", "D684", "R724", "U561", "R479", "D353", "L501" };

            var path1 = new List<Tuple<int, int>>();
            var path2 = new List<Tuple<int, int>>();

            path1.Add(Tuple.Create(0, 0));
            path2.Add(Tuple.Create(0, 0));

            foreach (var step in seed1)
            {
                char direction = step[0];
                int distance = Convert.ToInt32(step.Substring(1));
                int xChange = 0;
                int yChange = 0;
                switch (direction)
                {
                    case 'U':
                        yChange = 1;
                        break;
                    case 'D':
                        yChange = -1;
                        break;
                    case 'R':
                        xChange = 1;
                        break;
                    case 'L':
                        xChange = -1;
                        break;
                    default:
                        break;
                }
                for (int i = 0; i < distance; i++)
                {
                    var oldStep = path1.Last();
                    var newStep = Tuple.Create(oldStep.Item1 + xChange, oldStep.Item2 + yChange);
                    path1.Add(newStep);
                }
            }

            foreach (var step in seed2)
            {
                char direction = step[0];
                int distance = Convert.ToInt32(step.Substring(1));
                int xChange = 0;
                int yChange = 0;
                switch (direction)
                {
                    case 'U':
                        yChange = 1;
                        break;
                    case 'D':
                        yChange = -1;
                        break;
                    case 'R':
                        xChange = 1;
                        break;
                    case 'L':
                        xChange = -1;
                        break;
                    default:
                        break;
                }
                for (int i = 0; i < distance; i++)
                {
                    var oldStep = path2.Last();
                    var newStep = Tuple.Create(oldStep.Item1 + xChange, oldStep.Item2 + yChange);
                    path2.Add(newStep);
                }
            }


            var crosses = path1.Intersect(path2);
            var distances = new List<int>();
            foreach (var cross in crosses)
            {
                var distance = Math.Abs(cross.Item1) + Math.Abs(cross.Item2);
                if (distance != 0)
                    distances.Add(distance);
            }


            return distances.Min();
        }
        static int Day3Puzzle2()
        {
            var seed1 = new List<string> { "R1008", "U428", "L339", "U16", "R910", "U221", "R53", "D546", "L805", "U376", "L19", "U708", "R493", "D489", "L443", "D567", "R390", "D771", "R270", "U737", "R926", "U181", "L306", "D456", "L668", "D79", "L922", "U433", "L701", "U472", "R914", "U903", "L120", "U199", "L273", "D206", "L967", "U711", "R976", "U976", "R603", "U8", "L882", "U980", "R561", "D697", "L224", "D620", "L483", "U193", "R317", "D588", "L932", "D990", "R658", "U998", "L136", "U759", "R463", "U890", "L297", "U648", "R163", "U250", "R852", "U699", "R236", "D254", "L173", "U720", "L259", "U632", "L635", "U426", "R235", "D699", "R411", "U650", "L258", "D997", "L781", "D209", "L697", "D306", "L793", "U657", "L936", "U317", "R549", "D798", "L951", "D80", "R591", "D480", "R835", "U292", "L722", "U987", "L775", "U173", "R353", "U404", "L250", "U652", "L527", "D282", "L365", "D657", "L141", "D301", "R128", "D590", "L666", "U478", "L85", "D822", "L716", "U68", "R253", "D186", "R81", "U741", "L316", "D615", "L570", "U407", "L734", "D345", "L652", "U362", "L360", "D791", "R358", "U190", "L823", "U274", "L279", "D998", "L16", "D644", "L201", "D469", "R213", "D487", "L251", "D395", "R130", "U902", "L398", "U201", "L56", "D850", "R541", "D661", "R921", "U647", "R309", "D550", "L307", "D68", "R894", "U653", "L510", "D375", "R20", "U86", "R357", "D120", "L978", "D200", "L45", "D247", "R906", "U334", "L242", "D466", "R418", "U548", "R698", "D158", "R582", "U469", "L968", "U736", "R196", "U437", "R87", "D722", "R811", "U625", "L425", "D675", "L904", "D331", "R693", "D491", "R559", "U540", "L120", "D975", "R180", "U224", "R610", "U260", "L769", "D486", "R93", "D300", "L230", "U181", "L60", "U910", "L60", "D554", "L527", "U37", "R69", "D649", "R768", "D835", "L581", "U932", "L746", "U170", "L733", "U40", "L497", "D957", "R12", "U686", "R85", "D461", "R796", "D142", "R664", "U787", "R636", "D621", "R824", "D421", "R902", "D686", "L202", "D839", "R567", "D129", "L77", "D917", "L200", "D106", "R3", "D546", "L101", "D762", "R780", "U334", "L410", "D190", "R431", "D828", "L816", "D529", "R648", "D449", "L845", "U49", "R750", "U864", "L133", "D822", "R46", "U475", "L229", "U929", "L676", "D793", "R379", "U71", "L243", "U640", "L122", "U183", "R528", "U22", "R375", "D928", "R292", "U796", "R259", "U325", "L921", "U489", "L246", "D153", "L384", "D684", "L243", "U65", "L342", "U662", "R707" };
            var seed2 = new List<string> { "L1008", "D243", "L602", "D497", "L395", "U81", "R589", "U94", "R640", "D965", "L397", "D781", "R464", "U642", "L130", "D740", "R938", "D260", "L106", "D323", "L626", "U869", "L495", "U450", "R640", "D675", "R602", "D449", "L542", "U917", "L244", "U702", "L644", "D809", "R902", "U163", "R118", "U982", "L867", "D795", "R546", "U194", "R397", "D877", "L354", "D255", "L477", "U45", "L707", "D624", "R806", "U642", "L926", "D233", "L800", "U691", "L990", "D979", "L431", "U999", "L423", "D794", "L238", "U25", "R986", "U595", "L167", "U480", "L555", "U831", "R496", "U799", "L897", "D895", "L993", "D11", "R486", "U176", "L90", "U842", "R499", "U792", "R787", "U859", "L100", "U169", "R170", "D89", "R297", "D944", "R362", "D460", "R147", "U831", "L45", "U972", "R582", "D90", "L934", "U284", "R555", "U235", "L138", "U837", "R965", "U915", "R928", "U982", "R157", "D566", "L953", "U653", "L629", "U460", "L335", "D912", "R355", "D683", "L710", "D562", "R392", "D44", "R707", "D979", "L749", "D223", "L776", "D723", "R735", "D356", "R49", "U567", "L563", "D220", "L868", "U223", "R448", "D505", "L411", "U662", "L188", "D536", "R55", "U718", "L108", "D289", "R435", "U98", "R775", "U933", "L127", "D84", "R253", "D523", "L2", "D905", "R266", "U675", "R758", "D331", "R122", "U988", "R215", "D500", "R89", "U306", "R833", "U763", "R570", "D818", "L985", "U127", "L87", "D210", "R355", "D532", "R870", "U196", "R695", "U633", "R170", "D540", "R506", "U708", "L663", "U566", "L633", "U306", "L452", "U180", "R463", "D21", "L220", "D268", "R608", "U986", "L493", "D598", "L957", "D116", "L454", "D584", "L405", "U651", "R352", "U681", "R807", "U767", "L988", "U692", "R474", "U710", "R607", "U313", "R711", "U12", "R371", "D561", "R72", "U522", "R270", "U904", "L49", "U525", "R562", "U895", "L232", "D319", "R902", "D236", "L601", "D816", "R836", "U419", "R610", "U644", "L733", "U355", "L836", "U228", "L895", "D39", "L44", "D848", "L965", "U475", "R56", "U62", "L458", "U99", "R236", "D763", "R912", "U295", "R515", "U179", "R20", "D777", "R511", "D906", "R903", "U855", "L507", "D512", "L63", "D630", "R442", "U595", "L701", "U654", "R238", "D35", "L31", "D469", "R6", "D222", "R132", "D837", "R921", "U838", "R986", "D441", "L950", "D530", "L397", "U41", "L81", "D60", "L245", "D75", "R620", "D455", "L937", "D180", "R215", "D684", "R724", "U561", "R479", "D353", "L501" };

            var path1 = new List<Tuple<int, int>>();
            var path2 = new List<Tuple<int, int>>();

            path1.Add(Tuple.Create(0, 0));
            path2.Add(Tuple.Create(0, 0));

            foreach (var step in seed1)
            {
                char direction = step[0];
                int distance = Convert.ToInt32(step.Substring(1));
                int xChange = 0;
                int yChange = 0;
                switch (direction)
                {
                    case 'U':
                        yChange = 1;
                        break;
                    case 'D':
                        yChange = -1;
                        break;
                    case 'R':
                        xChange = 1;
                        break;
                    case 'L':
                        xChange = -1;
                        break;
                    default:
                        break;
                }
                for (int i = 0; i < distance; i++)
                {
                    var oldStep = path1.Last();
                    var newStep = Tuple.Create(oldStep.Item1 + xChange, oldStep.Item2 + yChange);
                    path1.Add(newStep);
                }
            }

            foreach (var step in seed2)
            {
                char direction = step[0];
                int distance = Convert.ToInt32(step.Substring(1));
                int xChange = 0;
                int yChange = 0;
                switch (direction)
                {
                    case 'U':
                        yChange = 1;
                        break;
                    case 'D':
                        yChange = -1;
                        break;
                    case 'R':
                        xChange = 1;
                        break;
                    case 'L':
                        xChange = -1;
                        break;
                    default:
                        break;
                }
                for (int i = 0; i < distance; i++)
                {
                    var oldStep = path2.Last();
                    var newStep = Tuple.Create(oldStep.Item1 + xChange, oldStep.Item2 + yChange);
                    path2.Add(newStep);
                }
            }


            var crosses = path1.Intersect(path2);
            var distances = new List<int>();
            foreach (var cross in crosses)
            {
                var items1 = path1.FindIndex(p => p.Item1 == cross.Item1 && p.Item2 == cross.Item2);
                var items2 = path2.FindIndex(p => p.Item1 == cross.Item1 && p.Item2 == cross.Item2);



                var distance = items1 + items2;
                if (distance != 0)
                    distances.Add(distance);
            }


            return distances.Min();
        }

        static int Day4Puzzle1()
        {
            var password = "359282";

            int validPasswords = 0;
            while (password != "820401")
            {
                if (Valid(password))
                {
                    validPasswords += 1;
                }

                password = (Convert.ToInt32(password) + 1).ToString("000000");
            }


            return validPasswords;
        }
        static bool Valid(string password)
        {
            bool hasDouble = false;
            bool isIncreasing = true;

            var pass = password.ToArray();
            for (int i = 1; i < password.Length; i++)
            {
                if (pass[i] < pass[i - 1])
                    isIncreasing = false;
                if (pass[i] == pass[i - 1])
                    hasDouble = true;
            }
            return hasDouble && isIncreasing;
        }
        static int Day4Puzzle2()
        {
            var password = "359282";
            int validPasswords = 0;
            while (password != "820401")
            {
                if (Valid2(password))
                    validPasswords += 1;
                password = (Convert.ToInt32(password) + 1).ToString("000000");
            }
            return validPasswords;
        }
        static bool Valid2(string password)
        {
            bool hasDouble = false;
            bool hasExactDouble = false;
            bool isIncreasing = true;

            string subPassword = "";
            for (int i = 1; i < password.Length; i++)
            {
                if (password[i] < password[i - 1])
                    isIncreasing = false;
                if (password[i] == password[i - 1])
                {
                    hasDouble = true;
                    subPassword += password[i];
                }
            }

            for (int i = 0; i < subPassword.Length; i++)
            {
                if ((i == 0 || subPassword[i] != subPassword[i - 1]) && (i == subPassword.Length - 1 || subPassword[i] != subPassword[i + 1]))
                    hasExactDouble = true;
            }

            return hasDouble && hasExactDouble && isIncreasing;
        }


        static int Day5Puzzle1()
        {
            var seed = new List<int> { 3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1102, 89, 49, 225, 1102, 35, 88, 224, 101, -3080, 224, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 3, 224, 1, 223, 224, 223, 1101, 25, 33, 224, 1001, 224, -58, 224, 4, 224, 102, 8, 223, 223, 101, 5, 224, 224, 1, 223, 224, 223, 1102, 78, 23, 225, 1, 165, 169, 224, 101, -80, 224, 224, 4, 224, 102, 8, 223, 223, 101, 7, 224, 224, 1, 224, 223, 223, 101, 55, 173, 224, 1001, 224, -65, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 1, 224, 1, 223, 224, 223, 2, 161, 14, 224, 101, -3528, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 7, 224, 1, 224, 223, 223, 1002, 61, 54, 224, 1001, 224, -4212, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 1, 224, 1, 223, 224, 223, 1101, 14, 71, 225, 1101, 85, 17, 225, 1102, 72, 50, 225, 1102, 9, 69, 225, 1102, 71, 53, 225, 1101, 10, 27, 225, 1001, 158, 34, 224, 101, -51, 224, 224, 4, 224, 102, 8, 223, 223, 101, 6, 224, 224, 1, 223, 224, 223, 102, 9, 154, 224, 101, -639, 224, 224, 4, 224, 102, 8, 223, 223, 101, 2, 224, 224, 1, 224, 223, 223, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 108, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 329, 101, 1, 223, 223, 1007, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 344, 1001, 223, 1, 223, 8, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 359, 1001, 223, 1, 223, 108, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 374, 1001, 223, 1, 223, 107, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 389, 101, 1, 223, 223, 1107, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 404, 1001, 223, 1, 223, 1107, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 419, 101, 1, 223, 223, 1007, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 434, 1001, 223, 1, 223, 1108, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 449, 101, 1, 223, 223, 1008, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 464, 101, 1, 223, 223, 7, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 479, 101, 1, 223, 223, 1008, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 494, 101, 1, 223, 223, 1107, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 509, 1001, 223, 1, 223, 1108, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 524, 101, 1, 223, 223, 7, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 539, 1001, 223, 1, 223, 107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 554, 101, 1, 223, 223, 107, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 569, 101, 1, 223, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 584, 1001, 223, 1, 223, 8, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 599, 101, 1, 223, 223, 1108, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 614, 101, 1, 223, 223, 108, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 629, 1001, 223, 1, 223, 8, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 644, 1001, 223, 1, 223, 7, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 659, 1001, 223, 1, 223, 1007, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 674, 101, 1, 223, 223, 4, 223, 99, 226 };

            return Complier(seed, 1);
        }
        static int Day5Puzzle2()
        {
            var seed = new List<int> { 3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1102, 89, 49, 225, 1102, 35, 88, 224, 101, -3080, 224, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 3, 224, 1, 223, 224, 223, 1101, 25, 33, 224, 1001, 224, -58, 224, 4, 224, 102, 8, 223, 223, 101, 5, 224, 224, 1, 223, 224, 223, 1102, 78, 23, 225, 1, 165, 169, 224, 101, -80, 224, 224, 4, 224, 102, 8, 223, 223, 101, 7, 224, 224, 1, 224, 223, 223, 101, 55, 173, 224, 1001, 224, -65, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 1, 224, 1, 223, 224, 223, 2, 161, 14, 224, 101, -3528, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 7, 224, 1, 224, 223, 223, 1002, 61, 54, 224, 1001, 224, -4212, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 1, 224, 1, 223, 224, 223, 1101, 14, 71, 225, 1101, 85, 17, 225, 1102, 72, 50, 225, 1102, 9, 69, 225, 1102, 71, 53, 225, 1101, 10, 27, 225, 1001, 158, 34, 224, 101, -51, 224, 224, 4, 224, 102, 8, 223, 223, 101, 6, 224, 224, 1, 223, 224, 223, 102, 9, 154, 224, 101, -639, 224, 224, 4, 224, 102, 8, 223, 223, 101, 2, 224, 224, 1, 224, 223, 223, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 108, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 329, 101, 1, 223, 223, 1007, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 344, 1001, 223, 1, 223, 8, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 359, 1001, 223, 1, 223, 108, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 374, 1001, 223, 1, 223, 107, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 389, 101, 1, 223, 223, 1107, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 404, 1001, 223, 1, 223, 1107, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 419, 101, 1, 223, 223, 1007, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 434, 1001, 223, 1, 223, 1108, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 449, 101, 1, 223, 223, 1008, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 464, 101, 1, 223, 223, 7, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 479, 101, 1, 223, 223, 1008, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 494, 101, 1, 223, 223, 1107, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 509, 1001, 223, 1, 223, 1108, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 524, 101, 1, 223, 223, 7, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 539, 1001, 223, 1, 223, 107, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 554, 101, 1, 223, 223, 107, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 569, 101, 1, 223, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 584, 1001, 223, 1, 223, 8, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 599, 101, 1, 223, 223, 1108, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 614, 101, 1, 223, 223, 108, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 629, 1001, 223, 1, 223, 8, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 644, 1001, 223, 1, 223, 7, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 659, 1001, 223, 1, 223, 1007, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 674, 101, 1, 223, 223, 4, 223, 99, 226 };

            return Complier(seed, 5);
        }


        static int Day6Puzzle1()
        {
            var seed = new List<string>();
            string line = "";
            var file = new StreamReader(@"..\..\Data\Day6.txt");

            Dictionary<string, string> orbitList = new Dictionary<string, string>();
            while ((line = file.ReadLine()) != null)
            {
                var pair = line.Split(')');
                orbitList.Add(pair[1], pair[0]);
            }

            int totalOrbits = 0;
            foreach (var item in orbitList)
            {
                int orbits = 1;
                var newItem = item.Value;
                while (newItem != "COM")
                {
                    newItem = orbitList[newItem];
                    orbits += 1;
                }

                totalOrbits += orbits;
            }

            return totalOrbits;
        }
        static int Day6Puzzle2()
        {
            var seed = new List<string>();
            string line = "";
            var file = new StreamReader(@"..\..\Data\Day6.txt");

            Dictionary<string, string> orbitList = new Dictionary<string, string>();
            Dictionary<string, List<string>> orbitRelations = new Dictionary<string, List<string>>();
            while ((line = file.ReadLine()) != null)
            {
                var pair = line.Split(')');
                orbitList.Add(pair[1], pair[0]);

                if (orbitRelations.ContainsKey(pair[0]))
                    orbitRelations[pair[0]].Add(pair[1]);
                else
                    orbitRelations.Add(pair[0], new List<string> { pair[1] });

                if (orbitRelations.ContainsKey(pair[1]))
                    orbitRelations[pair[1]].Add(pair[0]);
                else
                    orbitRelations.Add(pair[1], new List<string> { pair[0] });

            }

            //var starter = orbitRelations["YOU"];

            List<string> test = new List<string>();
            //foreach(var obj in starter)
            //{
            var curPath = new List<string> { "YOU" };
            test = DFS(orbitRelations, curPath.ToArray(), "YOU");
            var forbiddenWords = new List<string> { "YOU", "SAN" };
            var test2 = test.Except(forbiddenWords);
            //}

            return test2.Count() - 1;
        } //Need to improve
        static List<string> DFS(Dictionary<string, List<string>> tree, string[] curPath, string curObj)
        {
            if (curObj == "SAN")
            {
                var temp = curPath.ToList();
                temp.Add(curObj);
                return temp;
            }

            var valids = new List<List<string>>();
            var starter = tree[curObj];
            foreach (var obj in starter)
            {
                if (!curPath.Contains(obj))
                {
                    var temp = curPath.ToList();
                    temp.Add(obj);
                    var copyPath = temp.ToArray();
                    var test = DFS(tree, copyPath, obj);

                    if (test != null && test.LastOrDefault() == "SAN")
                        valids.Add(test);
                }
            }

            return valids.OrderBy(v => v.Count()).FirstOrDefault();
        }


        static int Day7Puzzle1()
        {
            var seed = new List<int> { 3, 8, 1001, 8, 10, 8, 105, 1, 0, 0, 21, 38, 55, 64, 89, 114, 195, 276, 357, 438, 99999, 3, 9, 101, 3, 9, 9, 102, 3, 9, 9, 1001, 9, 5, 9, 4, 9, 99, 3, 9, 101, 2, 9, 9, 1002, 9, 3, 9, 101, 5, 9, 9, 4, 9, 99, 3, 9, 101, 3, 9, 9, 4, 9, 99, 3, 9, 1002, 9, 4, 9, 101, 5, 9, 9, 1002, 9, 5, 9, 101, 5, 9, 9, 102, 3, 9, 9, 4, 9, 99, 3, 9, 101, 3, 9, 9, 1002, 9, 4, 9, 101, 5, 9, 9, 102, 5, 9, 9, 1001, 9, 5, 9, 4, 9, 99, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 99, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 99, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 99, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 99, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 99 };
            Dictionary<string, int> tests = new Dictionary<string, int>();

            for (int i = 0; i < 5; i++)
            {
                for (int j = 0; j < 5; j++)
                {
                    for (int k = 0; k < 5; k++)
                    {
                        for (int l = 0; l < 5; l++)
                        {
                            for (int m = 0; m < 5; m++)
                            {
                                var order = new List<int> { i, j, k, l, m };
                                if (order.Distinct().Count() == 5)
                                {
                                    var first = Complier(seed, order[0], 0);
                                    var second = Complier(seed, order[1], first);
                                    var third = Complier(seed, order[2], second);
                                    var fourth = Complier(seed, order[3], third);
                                    var result = Complier(seed, order[4], fourth);

                                    string key = $"{order[0]}{order[1]}{order[2]}{order[3]}{order[4]}";
                                    tests.Add(key, result);
                                }
                            }

                        }

                    }

                }
            }

            //var returner = tests.OrderBy(t => t.Value).Last().Key;
            var returner = tests.OrderBy(t => t.Value).Last().Value;
            return returner;
        }
        static int Day7Puzzle2()
        {
            var seed = new List<int> { 3, 8, 1001, 8, 10, 8, 105, 1, 0, 0, 21, 38, 55, 64, 89, 114, 195, 276, 357, 438, 99999, 3, 9, 101, 3, 9, 9, 102, 3, 9, 9, 1001, 9, 5, 9, 4, 9, 99, 3, 9, 101, 2, 9, 9, 1002, 9, 3, 9, 101, 5, 9, 9, 4, 9, 99, 3, 9, 101, 3, 9, 9, 4, 9, 99, 3, 9, 1002, 9, 4, 9, 101, 5, 9, 9, 1002, 9, 5, 9, 101, 5, 9, 9, 102, 3, 9, 9, 4, 9, 99, 3, 9, 101, 3, 9, 9, 1002, 9, 4, 9, 101, 5, 9, 9, 102, 5, 9, 9, 1001, 9, 5, 9, 4, 9, 99, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 99, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 99, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 99, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 99, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 101, 1, 9, 9, 4, 9, 3, 9, 101, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 3, 9, 1002, 9, 2, 9, 4, 9, 3, 9, 102, 2, 9, 9, 4, 9, 3, 9, 1001, 9, 1, 9, 4, 9, 99 };
            seed = new List<int> { 3, 52, 1001, 52, -5, 52, 3, 53, 1, 52, 56, 54, 1007, 54, 5, 55, 1005, 55, 26, 1001, 54, -5, 54, 1105, 1, 12, 1, 53, 54, 53, 1008, 54, 0, 55, 1001, 55, 1, 55, 2, 53, 55, 53, 4, 53, 1001, 56, -1, 56, 1005, 56, 6, 99, 0, 0, 0, 0, 10 };
            Dictionary<string, int> tests = new Dictionary<string, int>();

            for (int i = 5; i < 10; i++)
            {
                for (int j = 5; j < 10; j++)
                {
                    for (int k = 5; k < 10; k++)
                    {
                        for (int l = 5; l < 10; l++)
                        {
                            for (int m = 5; m < 10; m++)
                            {
                                var order = new List<int> { i, j, k, l, m };
                                if (order.Distinct().Count() == 5)
                                {
                                    var first = Complier(seed, order[0], 0);
                                    var second = Complier(seed, order[1], first);
                                    var third = Complier(seed, order[2], second);
                                    var fourth = Complier(seed, order[3], third);
                                    var result = Complier(seed, order[4], fourth);

                                    string key = $"{order[0]}{order[1]}{order[2]}{order[3]}{order[4]}";
                                    tests.Add(key, result);
                                }
                            }

                        }

                    }

                }
            }

            //var returner = tests.OrderBy(t => t.Value).Last().Key;
            var returner = tests.OrderBy(t => t.Value).Last().Value;
            return returner;
        } //Need to finish


        static int Day8Puzzle1()
        {
            string seed
            var imageSlices = new List<string>();

            while (seed.Any())
            {
                var slice = seed.Substring(0, 150);
                seed = new string(seed.Skip(150).ToArray());//.ToString();
                imageSlices.Add(slice);
            }

            var least0s = imageSlices.OrderBy(t => t.Count(t2 => t2 == '0')).First();
            var oneCount = least0s.Count(t => t == '1');
            var twoCount = least0s.Count(t => t == '2');

            var returner = oneCount * twoCount;
            return returner;
        }
        static void Day8Puzzle2()
        {
            string seed
            var imageSlices = new List<string>();

            while (seed.Any())
            {
                var slice = seed.Substring(0, 150);
                seed = new string(seed.Skip(150).ToArray());//.ToString();
                imageSlices.Add(slice);
            }

            var image = new string('2', 150).ToArray();

            foreach (var slice in imageSlices)
            {
                for (int i = 0; i < 150; i++)
                {
                    if (image[i] == '2')
                        image[i] = slice[i];
                }
            }

            var imageString = new string(image);
            while (imageString.Any())
            {
                var slice = imageString.Substring(0, 25);
                imageString = new string(imageString.Skip(25).ToArray());//.ToString();

                //slice = slice.Replace('1', ' ').Replace('0', '■');
                slice = slice.Replace('0', ' ').Replace('1', '■'); //Console is white-on-black, not black-on-white
                Console.WriteLine(slice);
            }
        }

        static int Day9Puzzle1()
        {

            return 0;
        } //Finish 7.2 first
        static int Day9Puzzle2()
        {

            return 0;
        } //Finish 7.2 first


        static int Day10Puzzle1()
        {
            var file = new StreamReader(@"..\..\Data\Day10.txt");
            List<string> lines = new List<string>();
            string line;
            while ((line = file.ReadLine()) != null)
            {
                //var pair = line.Split(')');
                lines.Add(line);
            }

            List<Tuple<int, int>> coords = new List<Tuple<int, int>>();
            for (int i = 0; i < lines.Count; i++)
            {
                for (int j = 0; j < lines[0].Count(); j++)
                {
                    if (lines[i][j] == '#')
                        coords.Add(Tuple.Create(j, i));
                }
            }

            Dictionary<Tuple<int, int>, int> visibleAsteroids = new Dictionary<Tuple<int, int>, int>();
            foreach (var coord in coords)
            {
                var distances = coords.Where(c => c != coord).Select(c => new { x = coord.Item1 - c.Item1, y = coord.Item2 - c.Item2 });
                var reducedDistances = from d in distances
                                       let gcd = Math.Abs(GCD(d.x, d.y))
                                       select new { x = d.x / gcd, y = d.y / gcd };

                var uniqueDistances = reducedDistances.Distinct();

                visibleAsteroids.Add(coord, uniqueDistances.Count());
            }

            var orderedVisAst = visibleAsteroids.OrderBy(q => q.Value).ToList();
            var mostVis = orderedVisAst.Last();
            return mostVis.Value;
        }
        static int GCD(int x, int y)
        {
            while (y != 0)
            {
                int tmp = x % y;
                x = y;
                y = tmp;
            }

            return x;
        }
        static int Day10Puzzle2()
        {
            var file = new StreamReader(@"..\..\Data\Day10.txt");
            List<string> lines = new List<string>();
            string line;
            while ((line = file.ReadLine()) != null)
            {
                //var pair = line.Split(')');
                lines.Add(line);
            }

            List<Tuple<int, int>> coords = new List<Tuple<int, int>>();
            for (int i = 0; i < lines.Count; i++)
            {
                for (int j = 0; j < lines[0].Count(); j++)
                {
                    if (lines[i][j] == '#')
                        coords.Add(Tuple.Create(j, i));
                }
            }

            //Dictionary<Tuple<int, int>, int> visibleAsteroids = new Dictionary<Tuple<int, int>, int>();
            //foreach (var coord in coords)
            //{
            //    var distances = coords.Where(c => c != coord).Select(c => new { x = coord.Item1 - c.Item1, y = coord.Item2 - c.Item2 });
            //    var reducedDistances = from d in distances
            //                           let gcd = Math.Abs(GCD(d.x, d.y))
            //                           select new { x = d.x / gcd, y = d.y / gcd };

            //    var uniqueDistances = reducedDistances.Distinct();
            //    visibleAsteroids.Add(coord, uniqueDistances.Count());
            //}

            //var orderedVisAst = visibleAsteroids.OrderBy(q => q.Value).ToList();
            //var mostVis = orderedVisAst.Last();


            var bestCoords = Tuple.Create(26, 36); // mostVis.Key;
            var relativeCoords = coords.Where(c => c != bestCoords).Select(c => new { x = bestCoords.Item1 - c.Item1, y = bestCoords.Item2 - c.Item2 });

            var polarCoords = relativeCoords.Select(c => new { theta = Math.Atan2(c.y, c.x), r = Hypotenuse(c.x, c.y) }); //Math.Atan((double)c.y / c.x)
            var modifiedPolar = polarCoords.Select(p => new { theta = ((Math.PI * 5 / 2) - p.theta) % (Math.PI * 2), p.r }).ToList();
            var groupedPolar = modifiedPolar.GroupBy(p => p.theta).SelectMany(g => g.Select((coord, occur) => new { theta = coord.theta + (10 * occur), coord.r })); //, occur }));
            var orderedPolar = groupedPolar.OrderBy(p => p.theta).ToList();//.ThenBy(p => p.r).ToList();

            var asteroid = orderedPolar[199];
            var test2 = modifiedPolar.OrderBy(t => t.theta).ToList();
            var index = modifiedPolar.FindIndex(p => p.theta == asteroid.theta && p.r == asteroid.r);
            var test = coords[index];

            var relativeCartesian = new { x = asteroid.r * Math.Cos(asteroid.theta), y = asteroid.r * Math.Sin(asteroid.theta) };
            var trueCartesian = new { x = (int)Math.Round(bestCoords.Item1 - relativeCartesian.x), y = (int)Math.Round(bestCoords.Item2 - relativeCartesian.y) };
            return trueCartesian.x * 100 + trueCartesian.y;
        }

        static double Hypotenuse(int x, int y)
        {
            return Math.Sqrt(Math.Pow(x, 2) + Math.Pow(y, 2));
        }


        static int Day11Puzzle1()
        {

            return 0;
        } //Finish 9.2 first
        static int Day11Puzzle2()
        {

            return 0;
        } //Finish 9.2 first



        static int Day12Puzzle1()
        {
            var file = new StreamReader(@"..\..\Data\Day12.txt");
            List<Moon> moons = new List<Moon>();
            string line;
            while ((line = file.ReadLine()) != null)
            {
                var tempLine = line.Replace("<", "").Replace(">", "").Split(',').Select(x => x.Split('=')).Select(x => new { key = x[0].Trim(), value = int.Parse(x[1]) });//.Select(l => new {key = l[;
                Dictionary<string, int> test = new Dictionary<string, int>();
                foreach (var temp in tempLine)
                {
                    test.Add(temp.key, temp.value);
                }

                moons.Add(new Moon(test["x"], test["y"], test["z"]));
            }

            for (int step = 1; step <= 1000; step++)
            {
                foreach (var moon in moons)
                {
                    var xChange = moons.Count(m => m.PosX > moon.PosX) - moons.Count(m => m.PosX < moon.PosX);
                    var yChange = moons.Count(m => m.PosY > moon.PosY) - moons.Count(m => m.PosY < moon.PosY);
                    var zChange = moons.Count(m => m.PosZ > moon.PosZ) - moons.Count(m => m.PosZ < moon.PosZ);


                    moon.PrepMove(xChange, yChange, zChange);
                }

                moons.ForEach(m => m.Move());

                //if (step % 10 == 0)
                //{
                //    Console.WriteLine($"After {step} steps:");
                //    moons.ForEach(m => Console.WriteLine($"pos={m.GetPos()}, vel={m.GetVel()}"));
                //}
            }

            int totalEnergy = 0;
            foreach (var moon in moons)
            {
                totalEnergy += moon.Energy();
            }

            return totalEnergy;



        }
        static int Day12Puzzle2()
        {

            return 0;
        }

        //static int Day10Puzzle1()
        //{

        //    return 0;
        //}
        //static int Day10Puzzle2()
        //{

        //    return 0;
        //}



        static int Complier(List<int> seed, params int[] inputs)
        {
            int steps = 0;
            int inputStep = 0;
            int? returner = null;
            for (int curPos = 0; curPos < seed.Count(); curPos += steps)
            {
                var instructions = seed[curPos].ToString().Select(d => int.Parse(d.ToString())).Reverse().ToList();
                instructions[0] = instructions.ElementAtOrDefault(1) * 10 + instructions[0];
                if (instructions.Count() > 1)
                    instructions.RemoveAt(1);

                switch (instructions[0])
                {
                    case 1: //add
                        {
                            steps = 4;
                            var pos1 = instructions.ElementAtOrDefault(1) == 1 ? curPos + 1 : seed[curPos + 1];
                            var pos2 = instructions.ElementAtOrDefault(2) == 1 ? curPos + 2 : seed[curPos + 2];
                            var pos3 = instructions.ElementAtOrDefault(3) == 1 ? curPos + 3 : seed[curPos + 3];

                            seed[pos3] = seed[pos1] + seed[pos2];
                            break;
                        }
                    case 2: //multiply
                        {
                            steps = 4;
                            var pos1 = instructions.ElementAtOrDefault(1) == 1 ? curPos + 1 : seed[curPos + 1];
                            var pos2 = instructions.ElementAtOrDefault(2) == 1 ? curPos + 2 : seed[curPos + 2];
                            var pos3 = instructions.ElementAtOrDefault(3) == 1 ? curPos + 3 : seed[curPos + 3];

                            seed[pos3] = seed[pos1] * seed[pos2];
                            break;
                        }
                    case 3: //input
                        {
                            steps = 2;
                            var pos1 = instructions.ElementAtOrDefault(1) == 1 ? curPos + 1 : seed[curPos + 1];

                            //Console.Write("Please give input: ");
                            //var temp = Convert.ToInt32(Console.ReadLine());
                            var temp = inputs[inputStep];
                            inputStep++;
                            seed[pos1] = temp;
                        }
                        break;
                    case 4: //output
                        {
                            steps = 2;
                            var pos1 = instructions.ElementAtOrDefault(1) == 1 ? curPos + 1 : seed[curPos + 1];

                            //Console.WriteLine($"Output at Position {pos1}: {seed[pos1]}");
                            returner = seed[pos1];
                        }
                        break;
                    case 5: //jump if true
                        {
                            steps = 3;
                            var pos1 = instructions.ElementAtOrDefault(1) == 1 ? curPos + 1 : seed[curPos + 1];
                            var pos2 = instructions.ElementAtOrDefault(2) == 1 ? curPos + 2 : seed[curPos + 2];

                            if (seed[pos1] != 0)
                            {
                                steps = 0;
                                curPos = seed[pos2];
                            }
                        }
                        break;
                    case 6: //jump if false
                        {
                            steps = 3;
                            var pos1 = instructions.ElementAtOrDefault(1) == 1 ? curPos + 1 : seed[curPos + 1];
                            var pos2 = instructions.ElementAtOrDefault(2) == 1 ? curPos + 2 : seed[curPos + 2];

                            if (seed[pos1] == 0)
                            {
                                steps = 0;
                                curPos = seed[pos2];
                            }
                        }
                        break;
                    case 7: //less than
                        {
                            steps = 4;
                            var pos1 = instructions.ElementAtOrDefault(1) == 1 ? curPos + 1 : seed[curPos + 1];
                            var pos2 = instructions.ElementAtOrDefault(2) == 1 ? curPos + 2 : seed[curPos + 2];
                            var pos3 = instructions.ElementAtOrDefault(3) == 1 ? curPos + 3 : seed[curPos + 3];

                            seed[pos3] = seed[pos1] < seed[pos2] ? 1 : 0;
                        }
                        break;
                    case 8: //equals
                        {
                            steps = 4;
                            var pos1 = instructions.ElementAtOrDefault(1) == 1 ? curPos + 1 : seed[curPos + 1];
                            var pos2 = instructions.ElementAtOrDefault(2) == 1 ? curPos + 2 : seed[curPos + 2];
                            var pos3 = instructions.ElementAtOrDefault(3) == 1 ? curPos + 3 : seed[curPos + 3];

                            seed[pos3] = seed[pos1] == seed[pos2] ? 1 : 0;
                        }
                        break;
                    case 99: //exit
                        return returner ?? seed[0];
                    default: //we fucked up
                        return -1;
                }
            }
            return -1;
        }


        static int ComplierSeries(List<int> seed, int chainCount, bool loop, params int[] inputs)
        {

            return 0;
        }
    }




    public class Compiler
    {
        private int curPos;
        private List<int> seed;
        private List<int> inputs;

        public Compiler()
        {
            seed = new List<int>();
            inputs = new List<int>();
        }

        public void AddInputs(params int[] inputs)
        {
            this.inputs.AddRange(inputs);
        }




        public List<int> Compile(params int[] inputs)
        {
            List<int> returner = new List<int>();
            int inputStep = 0;
            while (curPos < seed.Count())
            {
                int steps = 0;
                var instructions = seed[curPos].ToString().Select(d => int.Parse(d.ToString())).Reverse().ToList();
                instructions[0] = instructions.ElementAtOrDefault(1) * 10 + instructions[0];
                if (instructions.Count() > 1)
                    instructions.RemoveAt(1);

                #region Switch
                switch (instructions[0])
                {
                    case 1: //add
                        {
                            steps = 4;
                            var pos1 = instructions.ElementAtOrDefault(1) == 1 ? curPos + 1 : seed[curPos + 1];
                            var pos2 = instructions.ElementAtOrDefault(2) == 1 ? curPos + 2 : seed[curPos + 2];
                            var pos3 = instructions.ElementAtOrDefault(3) == 1 ? curPos + 3 : seed[curPos + 3];

                            seed[pos3] = seed[pos1] + seed[pos2];
                            break;
                        }
                    case 2: //multiply
                        {
                            steps = 4;
                            var pos1 = instructions.ElementAtOrDefault(1) == 1 ? curPos + 1 : seed[curPos + 1];
                            var pos2 = instructions.ElementAtOrDefault(2) == 1 ? curPos + 2 : seed[curPos + 2];
                            var pos3 = instructions.ElementAtOrDefault(3) == 1 ? curPos + 3 : seed[curPos + 3];

                            seed[pos3] = seed[pos1] * seed[pos2];
                            break;
                        }
                    case 3: //input
                        {
                            steps = 2;
                            var pos1 = instructions.ElementAtOrDefault(1) == 1 ? curPos + 1 : seed[curPos + 1];

                            //Console.Write("Please give input: ");
                            //var temp = Convert.ToInt32(Console.ReadLine());
                            if (inputStep < inputs.Count())
                            {
                                var temp = inputs[inputStep];
                                inputStep++;
                                seed[pos1] = temp;
                            }
                            else
                            {
                                return returner;
                            }
                        }
                        break;
                    case 4: //output
                        {
                            steps = 2;
                            var pos1 = instructions.ElementAtOrDefault(1) == 1 ? curPos + 1 : seed[curPos + 1];

                            returner.Add(seed[pos1]);
                        }
                        break;
                    case 5: //jump if true
                        {
                            steps = 3;
                            var pos1 = instructions.ElementAtOrDefault(1) == 1 ? curPos + 1 : seed[curPos + 1];
                            var pos2 = instructions.ElementAtOrDefault(2) == 1 ? curPos + 2 : seed[curPos + 2];

                            if (seed[pos1] != 0)
                            {
                                steps = 0;
                                curPos = seed[pos2];
                            }
                        }
                        break;
                    case 6: //jump if false
                        {
                            steps = 3;
                            var pos1 = instructions.ElementAtOrDefault(1) == 1 ? curPos + 1 : seed[curPos + 1];
                            var pos2 = instructions.ElementAtOrDefault(2) == 1 ? curPos + 2 : seed[curPos + 2];

                            if (seed[pos1] == 0)
                            {
                                steps = 0;
                                curPos = seed[pos2];
                            }
                        }
                        break;
                    case 7: //less than
                        {
                            steps = 4;
                            var pos1 = instructions.ElementAtOrDefault(1) == 1 ? curPos + 1 : seed[curPos + 1];
                            var pos2 = instructions.ElementAtOrDefault(2) == 1 ? curPos + 2 : seed[curPos + 2];
                            var pos3 = instructions.ElementAtOrDefault(3) == 1 ? curPos + 3 : seed[curPos + 3];

                            seed[pos3] = seed[pos1] < seed[pos2] ? 1 : 0;
                        }
                        break;
                    case 8: //equals
                        {
                            steps = 4;
                            var pos1 = instructions.ElementAtOrDefault(1) == 1 ? curPos + 1 : seed[curPos + 1];
                            var pos2 = instructions.ElementAtOrDefault(2) == 1 ? curPos + 2 : seed[curPos + 2];
                            var pos3 = instructions.ElementAtOrDefault(3) == 1 ? curPos + 3 : seed[curPos + 3];

                            seed[pos3] = seed[pos1] == seed[pos2] ? 1 : 0;
                        }
                        break;
                    case 99: //exit
                        return returner;
                    default: //we fucked up
                        return null;
                }
                #endregion

                curPos += steps;
            }

            return returner;
        }
    }


    public class Moon
    {
        public int PosX;
        public int PosY;
        public int PosZ;

        public int VelX;
        public int VelY;
        public int VelZ;

        public int AccelX;
        public int AccelY;
        public int AccelZ;

        public Moon(int x, int y, int z)
        {
            PosX = x;
            PosY = y;
            PosZ = z;

            VelX = 0;
            VelY = 0;
            VelZ = 0;

        }


        public void Move(int x, int y, int z)
        {
            VelX += x;
            VelY += y;
            VelZ += z;

            PosX += VelX;
            PosY += VelY;
            PosZ += VelZ;

            AccelX = 0;
            AccelY = 0;
            AccelZ = 0;
        }

        public void PrepMove(int x, int y, int z)
        {
            AccelX = x;
            AccelY = y;
            AccelZ = z;
        }

        public void Move()
        {
            VelX += AccelX;
            VelY += AccelY;
            VelZ += AccelZ;

            PosX += VelX;
            PosY += VelY;
            PosZ += VelZ;

            AccelX = 0;
            AccelY = 0;
            AccelZ = 0;
        }

        public int Energy()
        {
            int potential = Math.Abs(PosX) + Math.Abs(PosY) + Math.Abs(PosZ);
            int kinetic = Math.Abs(VelX) + Math.Abs(VelY) + Math.Abs(VelZ);

            return potential * kinetic;
        }


        public string GetPos()
        {
            return $"<x={PosX}, y={PosY}, z={PosZ}>";
        }

        public string GetVel()
        {
            return $"<x={VelX}, y={VelY}, z={VelZ}>";
        }
    }
}
